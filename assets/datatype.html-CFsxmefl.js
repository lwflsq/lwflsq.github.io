import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as a,e as n}from"./app-BzPplCq-.js";const l={},o=n(`<p>JavaScript 中的值都具有特定的类型。例如，字符串或数字。 在 JavaScript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。</p><h3 id="number-类型" tabindex="-1"><a class="header-anchor" href="#number-类型"><span>Number 类型</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> n</span><span style="color:#000000;"> = </span><span style="color:#098658;">123</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">n</span><span style="color:#000000;"> = </span><span style="color:#098658;">12.345</span><span style="color:#000000;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>number 类型代表<code>整数</code>和<code>浮点数</code>。</p><p>数字可以有很多操作，比如，乘法 <code>*</code>、除法 <code>/</code>、加法 <code>+</code>、减法 <code>-</code> 等等。</p><p>除了常规的数字，还包括所谓的“特殊数值（“special numeric values”）”也属于这种类型：Infinity、-Infinity 和 NaN。</p><ul><li>Infinity 代表数学概念中的 无穷大 ∞。是一个比任何数字都大的特殊值。<br> 我们可以通过除以 0 来得到它：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#098658;">1</span><span style="color:#000000;"> / </span><span style="color:#098658;">0</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// Infinity</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者在代码中直接使用它：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#0000FF;">Infinity</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// Infinity</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>NaN 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果，比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#A31515;">&quot;not a number&quot;</span><span style="color:#000000;"> / </span><span style="color:#098658;">2</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// NaN，这样的除法是错误的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>NaN 是粘性的。任何对 NaN 的进一步数学运算都会返回 NaN：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#0000FF;">NaN</span><span style="color:#000000;"> + </span><span style="color:#098658;">1</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// NaN</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#098658;">3</span><span style="color:#000000;"> * </span><span style="color:#0000FF;">NaN</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// NaN</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#A31515;">&quot;not a number&quot;</span><span style="color:#000000;"> / </span><span style="color:#098658;">2</span><span style="color:#000000;"> - </span><span style="color:#098658;">1</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// NaN</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，如果在数学表达式中有一个 NaN，会被传播到最终结果（只有一个例外：NaN ** 0 结果为 1）。</p><div class="hint-container info"><p class="hint-container-title">数学运算是安全的</p><p>在 JavaScript 中做数学运算是安全的。我们可以做任何事：除以 0，将非数字字符串视为数字，等等。</p><p>脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 NaN 的结果。<br> 而一般的逻辑错误会导致脚本终止运行，后面的代码将不再执行。</p></div><h3 id="bigint-类型" tabindex="-1"><a class="header-anchor" href="#bigint-类型"><span>BigInt 类型</span></a></h3><p>在 JavaScript 中，“number” 类型无法安全地表示大于 (2<sup>53-1</sup>)（即 <code>9007199254740991</code>），或小于 -(2<sup>53-1</sup>) 的整数。</p><p>更准确的说，“number” 类型可以存储更大的整数（最多 <code>1.7976931348623157 * 10308</code>），但超出安全整数范围 ±(2<sup>53-1</sup>) 会出现精度问题，因为并非所有数字都适合固定的 64 位存储。因此，可能存储的是“近似值”。</p><p>例如，这两个数字（正好超出了安全整数范围）是相同的：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#001080;">console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#098658;">9007199254740991</span><span style="color:#000000;"> + </span><span style="color:#098658;">1</span><span style="color:#000000;">); </span><span style="color:#008000;">// 9007199254740992</span></span>
<span class="line"><span style="color:#001080;">console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#098658;">9007199254740991</span><span style="color:#000000;"> + </span><span style="color:#098658;">2</span><span style="color:#000000;">); </span><span style="color:#008000;">// 9007199254740992</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，所有大于 (253-1) 的奇数都不能用 “number” 类型存储。</p><p>在大多数情况下，±(253-1) 范围就足够了，但有时候我们需要整个范围非常大的整数，例如用于密码学或微秒精度的时间戳。</p><p>BigInt 类型是最近被添加到 JavaScript 语言中的，用于表示任意长度的整数。</p><p>可以通过将 n 附加到整数字段的末尾来创建 BigInt 值。 <code>一般很少需要 BigInt 类型的数字</code></p><div class="hint-container info"><p class="hint-container-title">兼容性问题</p><p>目前 <code>Firefox/Chrome/Edge/Safari</code> 已经支持 BigInt 了，但 IE 还没有。</p></div><h3 id="string-类型" tabindex="-1"><a class="header-anchor" href="#string-类型"><span>String 类型</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> str</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;Hello&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> str2</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&#39;Single quotes are ok too&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> phrase</span><span style="color:#000000;"> = </span><span style="color:#A31515;">\`can embed another </span><span style="color:#0000FF;">\${</span><span style="color:#001080;">str</span><span style="color:#0000FF;">}</span><span style="color:#A31515;">\`</span><span style="color:#000000;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaScript 中，有三种包含字符串的方式。</p><ol><li>双引号：&quot;Hello&quot;.</li><li>单引号：&#39;Hello&#39;.</li><li>反引号：\`Hello\`.</li></ol><p>双引号和单引号都是“简单”引用，在 JavaScript 中两者几乎没有什么差别。</p><p>反引号是 功能扩展 引号。它们允许我们通过将变量和表达式包装在 \${…} 中，来将它们嵌入到字符串中。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> name</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;John&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// 嵌入一个变量</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#A31515;">\`Hello, </span><span style="color:#0000FF;">\${</span><span style="color:#001080;">name</span><span style="color:#0000FF;">}</span><span style="color:#A31515;">!\`</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// Hello, John!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// 嵌入一个表达式</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#A31515;">\`the result is </span><span style="color:#0000FF;">\${</span><span style="color:#098658;">1</span><span style="color:#000000;"> +</span><span style="color:#098658;"> 2</span><span style="color:#0000FF;">}</span><span style="color:#A31515;">\`</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// the result is 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\${…} 内的表达式会被计算，计算结果会成为字符串的一部分。可以在 \${…} 内放置任何东西：诸如名为 name 的变量，或者诸如 1 + 2 的算数表达式，或者其他一些更复杂的。</p><p>需要注意的是，这仅仅在反引号内有效，其他引号不允许这种嵌入。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#A31515;">&quot;the result is \${1 + 2}&quot;</span><span style="color:#000000;"> );</span></span>
<span class="line"><span style="color:#008000;"> // the result is \${1 + 2}（使用双引号则不会计算 \${…} 中的内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="boolean-类型-布尔类型、逻辑类型" tabindex="-1"><a class="header-anchor" href="#boolean-类型-布尔类型、逻辑类型"><span>Boolean 类型（布尔类型、逻辑类型）</span></a></h3><p>boolean 类型仅包含两个值：true 和 false。</p><p>这种类型通常用于存储表示 yes 或 no 的值：true 意味着 “yes，正确”，false 意味着 “no，不正确”。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> nameFieldChecked</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">true</span><span style="color:#000000;">; </span><span style="color:#008000;">// yes, name field is checked</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> ageFieldChecked</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">false</span><span style="color:#000000;">; </span><span style="color:#008000;">// no, age field is not checked</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>布尔值也可作为比较的结果：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> isGreater</span><span style="color:#000000;"> = </span><span style="color:#098658;">4</span><span style="color:#000000;"> &gt; </span><span style="color:#098658;">1</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#001080;">isGreater</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// true（比较的结果是 &quot;yes&quot;）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null-值" tabindex="-1"><a class="header-anchor" href="#null-值"><span>null 值</span></a></h3><p>特殊的 null 值不属于上述任何一种类型。<br> 它构成了一个独立的类型，只包含 null 值：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> age</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">null</span><span style="color:#000000;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>相比较于其他编程语言，JavaScript 中的 null 不是一个“对不存在的 object 的引用”或者 “null 指针”。</p><p>JavaScript 中的 null 仅仅是一个代表“无”、“空”或“值未知”的特殊值。<br> 上面的代码表示 age 是未知的。</p><h3 id="undefined-值" tabindex="-1"><a class="header-anchor" href="#undefined-值"><span>undefined 值</span></a></h3><p>特殊值 undefined 和 null 一样自成类型。<br> undefined 的含义是 未被赋值。<br> 如果一个变量已被声明，但未被赋值，那么它的值就是 undefined：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> age</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">(</span><span style="color:#001080;">age</span><span style="color:#000000;">); </span><span style="color:#008000;">// 弹出 &quot;undefined&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从技术上讲，可以显式地将 undefined 赋值给变量：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> age</span><span style="color:#000000;"> = </span><span style="color:#098658;">100</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// 将值修改为 undefined</span></span>
<span class="line"><span style="color:#001080;">age</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">undefined</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">(</span><span style="color:#001080;">age</span><span style="color:#000000;">); </span><span style="color:#008000;">// &quot;undefined&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>……但是不建议这样做。通常，使用 null 将一个“空”或者“未知”的值写入变量中，而 undefined 则保留作为未进行初始化的事物的默认初始值。</p><h3 id="object-类型和-symbol-类型" tabindex="-1"><a class="header-anchor" href="#object-类型和-symbol-类型"><span>Object 类型和 Symbol 类型</span></a></h3><p><code>object</code> 类型是一个特殊的类型。也被称为<a href="">对象</a></p><p>其他所有的数据类型都被称为“原始类型”，因为它们的值只包含一个单独的内容（字符串、数字或者其他）。相反，<code>object</code> 则用于储存数据集合和更复杂的实体。</p><p><code>symbol</code> 类型用于创建对象的唯一标识符。我们在这里提到 <code>symbol</code> 类型是为了完整性，但我们要在学完 <code>object</code> 类型后再学习它。</p><h3 id="typeof-运算符" tabindex="-1"><a class="header-anchor" href="#typeof-运算符"><span>typeof 运算符</span></a></h3><p><code>typeof</code> 运算符返回参数的类型。当我们想要分别处理不同类型值的时候，或者想快速进行数据类型检验时，非常有用。</p><p>对 <code>typeof x</code> 的调用会以字符串的形式返回数据类型：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#0000FF;"> undefined</span><span style="color:#008000;"> // &quot;undefined&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#098658;"> 0</span><span style="color:#008000;"> // &quot;number&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#098658;"> 10</span><span style="color:#0000FF;">n</span><span style="color:#008000;"> // &quot;bigint&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#0000FF;"> true</span><span style="color:#008000;"> // &quot;boolean&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#A31515;"> &quot;foo&quot;</span><span style="color:#008000;"> // &quot;string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#795E26;"> Symbol</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;id&quot;</span><span style="color:#000000;">) </span><span style="color:#008000;">// &quot;symbol&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#001080;"> Math</span><span style="color:#008000;"> // &quot;object&quot;  (1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#0000FF;"> null</span><span style="color:#008000;"> // &quot;object&quot;  (2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">typeof</span><span style="color:#001080;"> alert</span><span style="color:#008000;"> // &quot;function&quot;  (3)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：<br> Math 是一个提供数学运算的内建<code>object</code>。此处仅作为一个 object 的示例。</p><p>typeof null 的结果为 <code>&quot;object&quot;</code>。这是官方承认的 <code>typeof</code> 的错误，这个问题来自于 <code>JavaScript</code> 语言的早期阶段，并为了兼容性而保留了下来。<code>null</code> 绝对不是一个 <code>object</code>。<code>null</code> 有自己的类型，它是一个特殊值。typeof 的返回值在这里是错误的。</p><p><code>typeof alert</code> 的结果是 &quot;function&quot;，因为 <code>alert</code> 在 <code>JavaScript</code> 语言中是一个函数。在 <code>JavaScript</code> 语言中没有一个特有的 “function” 类型。函数继承于 object 类型。但是 typeof 会对函数区别对待，并返回 <code>&quot;function&quot;</code>。这也是来自于 <code>JavaScript</code> 语言早期的问题。从技术上讲，这种操作是不正确的，但在实际编程中却非常方便。</p><div class="hint-container info"><p class="hint-container-title">typeof(x) 语法</p><p>你可能还会遇到另一种语法：<code>typeof(x)</code>。它与 <code>typeof x</code> 相同。</p><p>简单点说：<code>typeof</code> 是一个操作符，不是一个函数。这里的括号不是 <code>typeof</code> 的一部分。它是数学运算分组的括号。</p><p>通常，这样的括号里包含的是一个数学表达式，例如 (2 + 2)，但这里它只包含一个参数 (x)。从语法上讲，它们允许在 typeof 运算符和其参数之间不打空格。</p><p>有些人更喜欢用 typeof(x)，但typeof x 语法更为常用。</p></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始数据类型，而 object 为复杂数据类型）。</p><ul><li>七种原始数据类型：</li></ul><ol><li><code>number</code> 用于任何类型的数字：整数或浮点数，在 ±(2<sup>53-1</sup>) 范围内的整数。</li><li><code>bigint</code> 用于任意长度的整数。</li><li><code>string</code> 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li><li><code>boolean</code> 用于 <code>true</code> 和 <code>false。</code></li><li><code>null</code> 用于未知的值 —— 只有一个 null 值的独立类型。</li><li><code>undefined</code> 用于未定义的值 —— 只有一个 <code>undefined</code> 值的独立类型。</li><li><code>symbol</code> 用于唯一的标识符。</li></ol><ul><li>以及一种非原始数据类型： <ul><li><code>object</code> 用于更复杂的数据结构。</li></ul></li></ul><p>通过 <code>typeof</code> 运算符查看存储在变量中的数据类型。</p><ul><li><code>typeof x</code>或者 <code>typeof(x)</code> 。</li><li>以字符串的形式返回类型名称，例如 &quot;<code>string</code>&quot;。</li><li><code>typeof null</code> 会返回 &quot;<code>object</code>&quot; —— 这是 <code>JavaScript</code> 编程语言的一个错误，实际上它并不是一个 <code>object</code>。</li></ul>`,73),p=[o];function t(i,c){return a(),e("div",null,p)}const u=s(l,[["render",t],["__file","datatype.html.vue"]]),y=JSON.parse('{"path":"/posts/javascript/datatype.html","title":"Javascript数据类型","lang":"zh-CN","frontmatter":{"title":"Javascript数据类型","description":"JavaScript 中的值都具有特定的类型。例如，字符串或数字。 在 JavaScript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。 Number 类型 number 类型代表整数和浮点数。 数字可以有很多操作，比如，乘法 *、除法 /、加法 +、减法 - 等等。 除了常规的数字，还包括所谓的“特殊数值（“special...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/javascript/datatype.html"}],["meta",{"property":"og:site_name","content":"cv blog"}],["meta",{"property":"og:title","content":"Javascript数据类型"}],["meta",{"property":"og:description","content":"JavaScript 中的值都具有特定的类型。例如，字符串或数字。 在 JavaScript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。 Number 类型 number 类型代表整数和浮点数。 数字可以有很多操作，比如，乘法 *、除法 /、加法 +、减法 - 等等。 除了常规的数字，还包括所谓的“特殊数值（“special..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T07:01:04.000Z"}],["meta",{"property":"article:author","content":"cv"}],["meta",{"property":"article:modified_time","content":"2024-06-10T07:01:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javascript数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-10T07:01:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"cv\\",\\"url\\":\\"https://github.com/lwflsq\\"}]}"]]},"headers":[{"level":3,"title":"Number 类型","slug":"number-类型","link":"#number-类型","children":[]},{"level":3,"title":"BigInt 类型","slug":"bigint-类型","link":"#bigint-类型","children":[]},{"level":3,"title":"String 类型","slug":"string-类型","link":"#string-类型","children":[]},{"level":3,"title":"Boolean 类型（布尔类型、逻辑类型）","slug":"boolean-类型-布尔类型、逻辑类型","link":"#boolean-类型-布尔类型、逻辑类型","children":[]},{"level":3,"title":"null 值","slug":"null-值","link":"#null-值","children":[]},{"level":3,"title":"undefined 值","slug":"undefined-值","link":"#undefined-值","children":[]},{"level":3,"title":"Object 类型和 Symbol 类型","slug":"object-类型和-symbol-类型","link":"#object-类型和-symbol-类型","children":[]},{"level":3,"title":"typeof 运算符","slug":"typeof-运算符","link":"#typeof-运算符","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1718002864000,"updatedTime":1718002864000,"contributors":[{"name":"普通市民梁生","email":"1874764803@qq.com","commits":1}]},"readingTime":{"minutes":7.31,"words":2193},"filePathRelative":"posts/javascript/datatype.md","localizedDate":"2024年6月10日","excerpt":"<p>JavaScript 中的值都具有特定的类型。例如，字符串或数字。\\n在 JavaScript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。</p>\\n<h3>Number 类型</h3>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"javascript\\" data-title=\\"javascript\\" style=\\"background-color:#FFFFFF;color:#000000\\"><pre class=\\"shiki light-plus vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#0000FF\\">let</span><span style=\\"color:#001080\\"> n</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#098658\\">123</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">n</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#098658\\">12.345</span><span style=\\"color:#000000\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{u as comp,y as data};
