import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,e as l}from"./app-BKrsWgxU.js";const n={},o=l(`<h3 id="字符串转换" tabindex="-1"><a class="header-anchor" href="#字符串转换"><span>字符串转换</span></a></h3><p>当我们需要一个字符串形式的值时，就会进行字符串转换。</p><p>比如，<code>alert(value)</code> 将 <code>value</code> 转换为字符串类型，然后显示这个值。</p><p>我们也可以显式地调用 <code>String(value) </code>来将 <code>value</code> 转换为字符串类型：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> value</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">true</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">(</span><span style="color:#0000FF;">typeof</span><span style="color:#001080;"> value</span><span style="color:#000000;">); </span><span style="color:#008000;">// boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">value</span><span style="color:#000000;"> = </span><span style="color:#795E26;">String</span><span style="color:#000000;">(</span><span style="color:#001080;">value</span><span style="color:#000000;">); </span><span style="color:#008000;">// 现在，值是一个字符串形式的 &quot;true&quot;</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">(</span><span style="color:#0000FF;">typeof</span><span style="color:#001080;"> value</span><span style="color:#000000;">); </span><span style="color:#008000;">// string</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串转换最明显。false 变成 &quot;false&quot;，null 变成 &quot;null&quot; 等。</p><h3 id="数字型转换" tabindex="-1"><a class="header-anchor" href="#数字型转换"><span>数字型转换</span></a></h3><p>在算术函数和表达式中，会自动进行 number 类型转换。</p><p>比如，当把除法 / 用于非 number 类型：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#A31515;">&quot;6&quot;</span><span style="color:#000000;"> / </span><span style="color:#A31515;">&quot;2&quot;</span><span style="color:#000000;"> ); </span><span style="color:#008000;">// 3, string 类型的值被自动转换成 number 类型后进行计算</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们也可以使用 Number(value) 显式地将这个 value 转换为 number 类型。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> str</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;123&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">(</span><span style="color:#0000FF;">typeof</span><span style="color:#001080;"> str</span><span style="color:#000000;">); </span><span style="color:#008000;">// string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> num</span><span style="color:#000000;"> = </span><span style="color:#795E26;">Number</span><span style="color:#000000;">(</span><span style="color:#001080;">str</span><span style="color:#000000;">); </span><span style="color:#008000;">// 变成 number 类型 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">(</span><span style="color:#0000FF;">typeof</span><span style="color:#001080;"> num</span><span style="color:#000000;">); </span><span style="color:#008000;">// number</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们从 <code>string</code> 类型源（如文本表单）中读取一个值，但期望输入一个数字时，通常需要进行显式转换。</p><p>如果该字符串不是一个有效的数字，转换的结果会是 <code>NaN</code>。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> age</span><span style="color:#000000;"> = </span><span style="color:#795E26;">Number</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;an arbitrary string instead of a number&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">(</span><span style="color:#001080;">age</span><span style="color:#000000;">); </span><span style="color:#008000;">// NaN，转换失败</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>number 类型转换规则：</p><table><thead><tr><th>值</th><th>变成……</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>true 和 false</td><td>1 and 0</td></tr><tr><td>string</td><td>去掉首尾空白字符（空格、换行符 \\n、制表符 \\t 等）后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Number</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;   123   &quot;</span><span style="color:#000000;">) ); </span><span style="color:#008000;">// 123</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Number</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;123z&quot;</span><span style="color:#000000;">) );      </span><span style="color:#008000;">// NaN（从字符串“读取”数字，读到 &quot;z&quot; 时出现错误）</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Number</span><span style="color:#000000;">(</span><span style="color:#0000FF;">true</span><span style="color:#000000;">) );        </span><span style="color:#008000;">// 1</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Number</span><span style="color:#000000;">(</span><span style="color:#0000FF;">false</span><span style="color:#000000;">) );       </span><span style="color:#008000;">// 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意 <code>null</code> 和 <code>undefined</code> <code>在这有点不同：null</code> 变成数字 0，<code>undefined</code> 变成 <code>NaN</code>。</p><p>大多数数学运算符都执行这种转换，我们将在下一节中进行介绍。</p><h3 id="布尔型转换" tabindex="-1"><a class="header-anchor" href="#布尔型转换"><span>布尔型转换</span></a></h3><p>布尔（boolean）类型转换是最简单的一个。</p><p>它发生在逻辑运算，但是也可以通过调用 Boolean(value) 显式地进行转换。</p><p>转换规则如下：</p><ul><li>直观上为“空”的值（如 0、空字符串、null、undefined 和 NaN）将变为 false。</li><li>其他值变成 true。 比如：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Boolean</span><span style="color:#000000;">(</span><span style="color:#098658;">1</span><span style="color:#000000;">) ); </span><span style="color:#008000;">// true</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Boolean</span><span style="color:#000000;">(</span><span style="color:#098658;">0</span><span style="color:#000000;">) ); </span><span style="color:#008000;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Boolean</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;hello&quot;</span><span style="color:#000000;">) ); </span><span style="color:#008000;">// true</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Boolean</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;&quot;</span><span style="color:#000000;">) ); </span><span style="color:#008000;">// false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">请注意：包含 0 的字符串 &quot;0&quot; 是 true</p><p>一些编程语言（比如 PHP）视 &quot;0&quot; 为 false。但在 JavaScript 中，非空的字符串总是 true。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#FFFFFF;color:#000000;"><pre class="shiki light-plus vp-code"><code><span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Boolean</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;0&quot;</span><span style="color:#000000;">) ); </span><span style="color:#008000;">// true</span></span>
<span class="line"><span style="color:#795E26;">alert</span><span style="color:#000000;">( </span><span style="color:#795E26;">Boolean</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot; &quot;</span><span style="color:#000000;">) ); </span><span style="color:#008000;">// 空格，也是 true（任何非空字符串都是 true）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,27),t=[o];function p(r,c){return e(),a("div",null,t)}const u=s(n,[["render",p],["__file","type-conversions.html.vue"]]),y=JSON.parse('{"path":"/posts/javascript/type-conversions.html","title":"类型转换","lang":"zh-CN","frontmatter":{"title":"类型转换","description":"字符串转换 当我们需要一个字符串形式的值时，就会进行字符串转换。 比如，alert(value) 将 value 转换为字符串类型，然后显示这个值。 我们也可以显式地调用 String(value) 来将 value 转换为字符串类型： 字符串转换最明显。false 变成 \\"false\\"，null 变成 \\"null\\" 等。 数字型转换 在算术函数和表达...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/javascript/type-conversions.html"}],["meta",{"property":"og:site_name","content":"cv blog"}],["meta",{"property":"og:title","content":"类型转换"}],["meta",{"property":"og:description","content":"字符串转换 当我们需要一个字符串形式的值时，就会进行字符串转换。 比如，alert(value) 将 value 转换为字符串类型，然后显示这个值。 我们也可以显式地调用 String(value) 来将 value 转换为字符串类型： 字符串转换最明显。false 变成 \\"false\\"，null 变成 \\"null\\" 等。 数字型转换 在算术函数和表达..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T09:58:23.000Z"}],["meta",{"property":"article:author","content":"cv"}],["meta",{"property":"article:modified_time","content":"2024-06-10T09:58:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型转换\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-10T09:58:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"cv\\",\\"url\\":\\"https://github.com/lwflsq\\"}]}"]]},"headers":[{"level":3,"title":"字符串转换","slug":"字符串转换","link":"#字符串转换","children":[]},{"level":3,"title":"数字型转换","slug":"数字型转换","link":"#数字型转换","children":[]},{"level":3,"title":"布尔型转换","slug":"布尔型转换","link":"#布尔型转换","children":[]}],"git":{"createdTime":1718013503000,"updatedTime":1718013503000,"contributors":[{"name":"普通市民梁生","email":"1874764803@qq.com","commits":1}]},"readingTime":{"minutes":2.22,"words":667},"filePathRelative":"posts/javascript/type-conversions.md","localizedDate":"2024年6月10日","excerpt":"<h3>字符串转换</h3>\\n<p>当我们需要一个字符串形式的值时，就会进行字符串转换。</p>\\n<p>比如，<code>alert(value)</code> 将 <code>value</code> 转换为字符串类型，然后显示这个值。</p>\\n<p>我们也可以显式地调用 <code>String(value) </code>来将 <code>value</code> 转换为字符串类型：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"javascript\\" data-title=\\"javascript\\" style=\\"background-color:#FFFFFF;color:#000000\\"><pre class=\\"shiki light-plus vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#0000FF\\">let</span><span style=\\"color:#001080\\"> value</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#0000FF\\">true</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#795E26\\">alert</span><span style=\\"color:#000000\\">(</span><span style=\\"color:#0000FF\\">typeof</span><span style=\\"color:#001080\\"> value</span><span style=\\"color:#000000\\">); </span><span style=\\"color:#008000\\">// boolean</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">value</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#795E26\\">String</span><span style=\\"color:#000000\\">(</span><span style=\\"color:#001080\\">value</span><span style=\\"color:#000000\\">); </span><span style=\\"color:#008000\\">// 现在，值是一个字符串形式的 \\"true\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#795E26\\">alert</span><span style=\\"color:#000000\\">(</span><span style=\\"color:#0000FF\\">typeof</span><span style=\\"color:#001080\\"> value</span><span style=\\"color:#000000\\">); </span><span style=\\"color:#008000\\">// string</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{u as comp,y as data};
